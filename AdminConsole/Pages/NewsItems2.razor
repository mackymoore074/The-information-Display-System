@page "/news-items2"
@using AdminConsole.IService
@using AdminConsole.Services
@using ClassLibrary.Models
@using ClassLibrary.DtoModels.NewsItem
@using ClassLibrary.DtoModels.Department
@using ClassLibrary.DtoModels.Location
@using ClassLibrary.DtoModels.Screen
@using ClassLibrary.DtoModels.Common
@inject INewsItemService NewsItemService
@inject IJSRuntime JsRuntime
@inject IDepartmentService DepartmentService
@inject ILocationService LocationService
@inject IScreenService ScreenService
@attribute [Authorize]

<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title">News Items</h5>
                <button class="btn btn-primary" @onclick="OpenCreateDialog">
                    <i class="bi bi-plus"></i> Add News Item
                </button>
            </div>

            @if (_newsItems == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Importance</th>
                                <th>Time Out Date</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in _newsItems)
                            {
                                <tr>
                                    <td>@item.Title</td>
                                    <td>@item.Importance</td>
                                    <td>@item.TimeOutDate.ToLocalTime().ToString("g")</td>
                                    <td>@item.DateCreated.ToLocalTime().ToString("g")</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-1" 
                                                @onclick="() => OpenEditDialog(item)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => OpenDeleteDialog(item)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@if (showDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@dialogTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@model" OnValidSubmit="SaveNewsItem">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText class="form-control" @bind-Value="model.Title" />
                            <ValidationMessage For="@(() => model.Title)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Content</label>
                            <InputTextArea class="form-control" @bind-Value="model.NewsItemBody" rows="5" />
                            <ValidationMessage For="@(() => model.NewsItemBody)" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Time Out Date</label>
                                <InputDate class="form-control" @bind-Value="model.TimeOutDate" />
                                <ValidationMessage For="@(() => model.TimeOutDate)" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label">Importance Level</label>
                                <InputSelect class="form-select" @bind-Value="model.Importance">
                                    @foreach (ImportanceLevel importance in Enum.GetValues(typeof(ImportanceLevel)))
                                    {
                                        <option value="@importance">@importance</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">More Information URL</label>
                            <InputText class="form-control" @bind-Value="model.MoreInformationUrl" />
                            <ValidationMessage For="@(() => model.MoreInformationUrl)" />
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="card h-100">
                                    <div class="card-header">
                                        Departments
                                    </div>
                                    <div class="card-body" style="max-height: 200px; overflow-y: auto;">
                                        @if (departments == null)
                                        {
                                            <div class="text-center">
                                                <div class="spinner-border spinner-border-sm" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            @foreach (var dept in departments)
                                            {
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input"
                                                           checked="@deptSelections[dept.Id]"
                                                           @onchange="@(e => deptSelections[dept.Id] = (bool)e.Value)" />
                                                    <label class="form-check-label">
                                                        @dept.Name
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="card h-100">
                                    <div class="card-header">
                                        Locations
                                    </div>
                                    <div class="card-body" style="max-height: 200px; overflow-y: auto;">
                                        @if (locations == null)
                                        {
                                            <div class="text-center">
                                                <div class="spinner-border spinner-border-sm" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            @foreach (var loc in locations)
                                            {
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input"
                                                           checked="@locSelections[loc.Id]"
                                                           @onchange="@(e => locSelections[loc.Id] = (bool)e.Value)" />
                                                    <label class="form-check-label">
                                                        @loc.Name
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="card h-100">
                                    <div class="card-header">
                                        Screens
                                    </div>
                                    <div class="card-body" style="max-height: 200px; overflow-y: auto;">
                                        @if (screens == null)
                                        {
                                            <div class="text-center">
                                                <div class="spinner-border spinner-border-sm" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            @foreach (var screen in screens)
                                            {
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input"
                                                           checked="@screenSelections[screen.Id]"
                                                           @onchange="@(e => screenSelections[screen.Id] = (bool)e.Value)" />
                                                    <label class="form-check-label">
                                                        @screen.Name
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<NewsItem> _newsItems;
    private List<DepartmentDto> departments;
    private List<LocationDto> locations;
    private List<ScreenDto> screens;
    private Dictionary<int, bool> deptSelections = new();
    private Dictionary<int, bool> locSelections = new();
    private Dictionary<int, bool> screenSelections = new();
    private bool showDialog;
    private string dialogTitle;
    private CreateNewsItemDto model = new();
    private int? editingId;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadRelatedData();
    }

    private async Task LoadRelatedData()
    {
        try
        {
            var deptResponse = await DepartmentService.GetDepartmentsAsync();
            if (deptResponse.Success)
            {
                departments = deptResponse.Data.ToList();
                foreach (var dept in departments)
                {
                    if (!deptSelections.ContainsKey(dept.Id))
                        deptSelections[dept.Id] = false;
                }
            }

            var locResponse = await LocationService.GetLocationsAsync();
            if (locResponse.Success)
            {
                locations = locResponse.Data.ToList();
                foreach (var loc in locations)
                {
                    if (!locSelections.ContainsKey(loc.Id))
                        locSelections[loc.Id] = false;
                }
            }

            var screenResponse = await ScreenService.GetAllAsync();
            if (screenResponse.Success)
            {
                screens = screenResponse.Data.ToList();
                foreach (var screen in screens)
                {
                    if (!screenSelections.ContainsKey(screen.Id))
                        screenSelections[screen.Id] = false;
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error loading related data: {ex.Message}");
        }
    }

    private void UpdateSelections(NewsItem item)
    {
        // Reset all selections
        foreach (var key in deptSelections.Keys.ToList())
            deptSelections[key] = false;
        foreach (var key in locSelections.Keys.ToList())
            locSelections[key] = false;
        foreach (var key in screenSelections.Keys.ToList())
            screenSelections[key] = false;

        // Set selected items
        foreach (var deptId in item.Departments)
            if (deptSelections.ContainsKey(deptId))
                deptSelections[deptId] = true;

        foreach (var locId in item.Locations)
            if (locSelections.ContainsKey(locId))
                locSelections[locId] = true;

        foreach (var screenId in item.Screens)
            if (screenSelections.ContainsKey(screenId))
                screenSelections[screenId] = true;
    }

    private void OpenCreateDialog()
    {
        editingId = null;
        model = new CreateNewsItemDto
        {
            TimeOutDate = DateTime.UtcNow.AddDays(7)
        };
        // Reset all selections
        foreach (var key in deptSelections.Keys.ToList())
            deptSelections[key] = false;
        foreach (var key in locSelections.Keys.ToList())
            locSelections[key] = false;
        foreach (var key in screenSelections.Keys.ToList())
            screenSelections[key] = false;

        dialogTitle = "Create News Item";
        showDialog = true;
    }

    private void OpenEditDialog(NewsItem item)
    {
        editingId = item.Id;
        model = new CreateNewsItemDto
        {
            Title = item.Title,
            NewsItemBody = item.NewsItemBody,
            TimeOutDate = item.TimeOutDate,
            Importance = item.Importance,
            MoreInformationUrl = item.MoreInformationUrl
        };
        UpdateSelections(item);
        dialogTitle = "Edit News Item";
        showDialog = true;
    }

    private async Task SaveNewsItem()
    {
        try
        {
            // Update model with selections
            model.Departments = deptSelections.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
            model.Locations = locSelections.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
            model.Screens = screenSelections.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();

            if (editingId.HasValue)
            {
                var response = await NewsItemService.UpdateNewsItemAsync(editingId.Value, model);
                if (response.Success)
                {
                    await LoadData();
                    CloseDialog();
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", response.Message);
                }
            }
            else
            {
                var response = await NewsItemService.CreateNewsItemAsync(model);
                if (response.Success)
                {
                    await LoadData();
                    CloseDialog();
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", response.Message);
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error saving news item: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        try
        {
            var response = await NewsItemService.GetAllNewsItemsAsync();
            if (response.Success)
            {
                _newsItems = response.Data;
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private async Task OpenDeleteDialog(NewsItem item)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {item.Title}?"))
        {
            await DeleteNewsItem(item.Id);
        }
    }

    private async Task DeleteNewsItem(int id)
    {
        try
        {
            var response = await NewsItemService.DeleteNewsItemAsync(id);
            if (response.Success)
            {
                await LoadData();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", response.Message);
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error deleting news item: {ex.Message}");
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
    }
} 