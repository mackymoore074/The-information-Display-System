@page "/login"
@layout LoginLayout
@using ClassLibrary.DtoModels.Common
@using AdminConsole.Data.Authentication
@using Blazored.LocalStorage
@using System.Net.Http.Json
@using AdminConsole.Services
@using Microsoft.Extensions.Options
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject IOptions<ApiSettings> ApiSettings

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                        </div>

                        <div class="form-group mb-4">
                            <label for="password">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                                <span>Loading...</span>
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
    }

    .card-title {
        color: #333;
        font-weight: 600;
    }

    .btn-primary {
        padding: 10px;
        font-weight: 500;
    }

    label {
        font-weight: 500;
        margin-bottom: 5px;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await Http.PostAsJsonAsync("/api/auth/login", new
            {
                email = loginModel.Email,
                password = loginModel.Password
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<LoginData>>();

                if (result?.Success == true && result.Data != null)
                {
                    var loginData = new LoginData
                    {
                        Token = result.Data.Token,
                        Role = result.Data.Role,
                        AdminId = result.Data.AdminId,
                        Email = result.Data.Email,
                        FirstName = result.Data.FirstName,
                        LastName = result.Data.LastName
                    };

                    await ((MockAuthenticationStateProvider)AuthStateProvider)
                        .MarkUserAsAuthenticated(loginData);
                        
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = result?.Message ?? 
                                 (result?.Errors != null && result.Errors.Any() 
                                     ? string.Join(", ", result.Errors) 
                                     : "Login failed");
                }
            }
            else
            {
                // Read the error response from the server
                var errorResult = await response.Content.ReadFromJsonAsync<ApiResponse<object>>();
                errorMessage = errorResult?.Message ?? 
                             (errorResult?.Errors != null && errorResult.Errors.Any() 
                                 ? string.Join(", ", errorResult.Errors) 
                                 : "Login failed");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex}");
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}
