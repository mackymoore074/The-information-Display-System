@page "/employees"
@using AdminConsole.IService
@using AdminConsole.Services
@using ClassLibrary.Models
@using ClassLibrary.DtoModels.Employee
@using ClassLibrary.DtoModels.Department
@using ClassLibrary.DtoModels.Location
@using ClassLibrary.DtoModels.Common
@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject ILocationService LocationService
@inject ILogger<Employees> Logger

<h3>Employees</h3>

<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="() => OpenModal()">Add Employee</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Employee ID</th>
            <th>Department</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (employees == null)
        {
            <tr><td colspan="6"><p>Loading...</p></td></tr>
        }
        else if (!employees.Any())
        {
            <tr><td colspan="6"><p>No employees found.</p></td></tr>
        }
        else
        {
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@($"{employee.FirstName} {employee.LastName}")</td>
                    <td>@employee.Email</td>
                    <td>@employee.Id</td>
                    <td>@employee.DepartmentName</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditEmployee(employee.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (showModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Employee</h5>
                    <button type="button" class="btn-close" @onclick="() => showModal = false"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newEmployee" OnValidSubmit="CreateEmployee">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="newEmployee.FirstName" />
                            <ValidationMessage For="@(() => newEmployee.FirstName)" />
                        </div>

                        <div class="mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="newEmployee.LastName" />
                            <ValidationMessage For="@(() => newEmployee.LastName)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="newEmployee.Email" />
                            <ValidationMessage For="@(() => newEmployee.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="departmentId" class="form-label">Department</label>
                            <InputSelect id="departmentId" class="form-select" @bind-Value="newEmployee.DepartmentId">
                                <option value="">Select Department</option>
                                @if (departments != null && departments.Any())
                                {
                                    @foreach (var department in departments)
                                    {
                                        <option value="@department.Id">@department.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newEmployee.DepartmentId)" />
                        </div>

                        <div class="mb-3">
                            <label for="locationId" class="form-label">Location</label>
                            <InputSelect id="locationId" class="form-select" @bind-Value="newEmployee.LocationId">
                                <option value="">Select Location</option>
                                @if (locations != null && locations.Any())
                                {
                                    @foreach (var location in locations)
                                    {
                                        <option value="@location.Id">@location.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newEmployee.LocationId)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => showModal = false">Close</button>
                            <button type="submit" class="btn btn-primary">Save Employee</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private IEnumerable<EmployeeDto> employees;
    private IEnumerable<DepartmentDto> departments;
    private IEnumerable<LocationDto> locations;
    private bool showModal = false;
    private CreateEmployeeDto newEmployee = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task OpenModal()
    {
        await LoadDepartments();
        await LoadLocations();
        showModal = true;
        StateHasChanged();
    }

    private async Task LoadEmployees()
    {
        var response = await EmployeeService.GetEmployeesAsync();
        if (response.Success)
        {
            employees = response.Data;
            Logger.LogInformation($"Loaded {employees.Count()} employees");
        }
        else
        {
            Logger.LogWarning("Failed to load employees");
            employees = Enumerable.Empty<EmployeeDto>();
        }
    }

    private async Task LoadDepartments()
    {
        var response = await DepartmentService.GetDepartmentsAsync();
        if (response.Success)
        {
            departments = response.Data;
            Logger.LogInformation($"Loaded {departments.Count()} departments");
        }
        else
        {
            Logger.LogWarning("Failed to load departments");
            departments = Enumerable.Empty<DepartmentDto>();
        }
    }

    private async Task LoadLocations()
    {
        var response = await LocationService.GetLocationsAsync();
        if (response.Success)
        {
            locations = response.Data;
            Logger.LogInformation($"Loaded {locations.Count()} locations");
        }
        else
        {
            Logger.LogWarning("Failed to load locations");
            locations = Enumerable.Empty<LocationDto>();
        }
    }

    private async Task CreateEmployee()
    {
        newEmployee.AdminId = 1;

        Logger.LogInformation($"Creating employee: FirstName={newEmployee.FirstName}, " +
            $"LastName={newEmployee.LastName}, " +
            $"Email={newEmployee.Email}, " +
            $"DepartmentId={newEmployee.DepartmentId}, " +
            $"LocationId={newEmployee.LocationId}, " +
            $"AdminId={newEmployee.AdminId}");

        var response = await EmployeeService.CreateEmployeeAsync(newEmployee);
        if (response.Success)
        {
            showModal = false;
            newEmployee = new();
            await LoadEmployees();
        }
        else
        {
            Logger.LogWarning($"Failed to create employee: {string.Join(", ", response.Errors)}");
        }
    }

    private async Task EditEmployee(int id)
    {
        // Implement edit functionality
    }

    private async Task DeleteEmployee(int id)
    {
        // Implement delete functionality
    }
} 