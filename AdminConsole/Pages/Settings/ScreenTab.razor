@using AdminConsole.IService
@using ClassLibrary.DtoModels.Common
@using ClassLibrary.DtoModels.Screen
@using ClassLibrary.DtoModels.Department
@using ClassLibrary.DtoModels.Location
@using ClassLibrary.DtoModels.Agency
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IScreenService ScreenService

<div class="d-flex justify-content-between align-items-center mb-4">
    <h4>Screen Management</h4>
    <button class="btn btn-primary" @onclick="() => ShowModal()">
        <span class="oi oi-plus me-2"></span>Add Screen
    </button>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Location</th>
                <th>Department</th>
                <th>Agency</th>
                <th>Screen Type</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (screens?.Any() == true)
            {
                @foreach (var screen in screens)
                {
                    <tr>
                        <td>@screen.Name</td>
                        <td>@screen.Description</td>
                        <td>@screen.LocationName</td>
                        <td>@screen.DepartmentName</td>
                        <td>@screen.AgencyName</td>
                        <td>@screen.ScreenType</td>
                        <td>
                            <span class="badge @(screen.IsOnline ? "bg-success" : "bg-danger")">
                                @(screen.IsOnline ? "Online" : "Offline")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowModal(screen)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteScreen(screen.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (showModal)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingScreen.Id > 0 ? "Edit" : "Add") Screen</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingScreen" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="editingScreen.Name" class="form-control" />
                            <ValidationMessage For="@(() => editingScreen.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="editingScreen.Description" class="form-control" />
                            <ValidationMessage For="@(() => editingScreen.Description)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <InputSelect @bind-Value="editingScreen.LocationId" class="form-select" @onchange="LocationChanged">
                                <option value="0">Select Location</option>
                                @foreach (var location in locations)
                                {
                                    <option value="@location.Id">@location.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingScreen.LocationId)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Department</label>
                            <InputSelect @bind-Value="editingScreen.DepartmentId" class="form-select" @onchange="DepartmentChanged">
                                <option value="0">Select Department</option>
                                @foreach (var department in departments)
                                {
                                    <option value="@department.Id">@department.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingScreen.DepartmentId)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Agency</label>
                            <InputSelect @bind-Value="editingScreen.AgencyId" class="form-select">
                                <option value="0">Select Agency</option>
                                @foreach (var agency in filteredAgencies)
                                {
                                    <option value="@agency.Id">@agency.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingScreen.AgencyId)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Screen Type</label>
                            <InputSelect @bind-Value="editingScreen.ScreenType" class="form-select">
                                <option value="">Select Screen Type</option>
                                <option value="LCD">LCD</option>
                                <option value="LED">LED</option>
                                <option value="Projector">Projector</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => editingScreen.ScreenType)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">MAC Address</label>
                            <InputText @bind-Value="editingScreen.MACAddress" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="statusMessage">Status Message</label>
                            <InputText id="statusMessage" class="form-control" @bind-Value="editingScreen.StatusMessage" />
                            <ValidationMessage For="@(() => editingScreen.StatusMessage)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showModal;
    private ScreenDto editingScreen = new();
    private List<ScreenDto> screens = new List<ScreenDto>();
    private List<LocationDto> locations = new List<LocationDto>();
    private List<DepartmentDto> departments = new List<DepartmentDto>();
    private List<AgencyDto> agencies = new List<AgencyDto>();
    private List<AgencyDto> filteredAgencies = new List<AgencyDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
        await LoadDepartments();
        await LoadAgencies();
        await LoadScreens();
    }

    private async Task LoadLocations()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse<List<LocationDto>>>("/api/location");
        if (response?.Success == true)
        {
            locations = response.Data ?? new();
        }
    }

    private async Task LoadDepartments()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse<List<DepartmentDto>>>("/api/department");
        if (response?.Success == true)
        {
            departments = response.Data ?? new();
        }
    }

    private async Task LoadAgencies()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse<List<AgencyDto>>>("/api/agency");
        if (response?.Success == true)
        {
            agencies = response.Data ?? new();
            filteredAgencies = agencies;
        }
    }

    private async Task LoadScreens()
    {
        var response = await ScreenService.GetAllAsync();
        if (response.Success)
        {
            screens = response.Data.ToList();
        }
    }

    private void ShowModal(ScreenDto? screen = null)
    {
        if (screen != null)
        {
            editingScreen = new ScreenDto
            {
                Id = screen.Id,
                Name = screen.Name,
                Description = screen.Description,
                LocationId = screen.LocationId,
                DepartmentId = screen.DepartmentId,
                AgencyId = screen.AgencyId,
                ScreenType = screen.ScreenType,
                MACAddress = screen.MACAddress,
                IsOnline = screen.IsOnline,
                StatusMessage = screen.StatusMessage
            };

            // Filter agencies based on location
            if (screen.LocationId > 0)
            {
                filteredAgencies = agencies.Where(a => a.LocationId == screen.LocationId).ToList();
            }
        }
        else
        {
            editingScreen = new ScreenDto();
            filteredAgencies = agencies;
        }

        showModal = true;
    }

    private void LocationChanged()
    {
        editingScreen.DepartmentId = 0;
        editingScreen.AgencyId = 0;
        
        if (editingScreen.LocationId > 0)
        {
            filteredAgencies = agencies.Where(a => a.LocationId == editingScreen.LocationId).ToList();
        }
        else
        {
            filteredAgencies = agencies;
        }
        
        StateHasChanged();
    }

    private void DepartmentChanged()
    {
        editingScreen.AgencyId = 0;
        StateHasChanged();
    }

    private void HideModal()
    {
        showModal = false;
        editingScreen = new();
    }

    private async Task HandleSubmit()
    {
        try
        {
            // Set default status message if none provided
            if (string.IsNullOrEmpty(editingScreen.StatusMessage))
            {
                editingScreen.StatusMessage = editingScreen.IsOnline ? "Online" : "Offline";
            }

            ApiResponse<ScreenDto> response;
            if (editingScreen.Id == 0)
            {
                var createDto = new CreateScreenDto
                {
                    Name = editingScreen.Name,
                    Description = editingScreen.Description,
                    LocationId = editingScreen.LocationId.ToString(),
                    AgencyId = editingScreen.AgencyId.ToString(),
                    DepartmentId = editingScreen.DepartmentId.ToString(),
                    ScreenType = editingScreen.ScreenType,
                    IsOnline = editingScreen.IsOnline,
                    StatusMessage = editingScreen.StatusMessage,
                    MACAddress = editingScreen.MACAddress
                };
                response = await ScreenService.CreateAsync(createDto);
            }
            else
            {
                var updateDto = new UpdateScreenDto
                {
                    Name = editingScreen.Name,
                    Description = editingScreen.Description,
                    LocationId = editingScreen.LocationId.ToString(),
                    AgencyId = editingScreen.AgencyId.ToString(),
                    DepartmentId = editingScreen.DepartmentId.ToString(),
                    ScreenType = editingScreen.ScreenType,
                    IsOnline = editingScreen.IsOnline,
                    StatusMessage = editingScreen.StatusMessage,
                    MACAddress = editingScreen.MACAddress
                };
                response = await ScreenService.UpdateAsync(editingScreen.Id, updateDto);
            }

            if (response.Success)
            {
                await LoadScreens();
                HideModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving screen: {ex}");
        }
    }

    private async Task DeleteScreen(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this screen?");
        if (!confirmed) return;

        var response = await ScreenService.DeleteAsync(id);
        if (response.Success)
        {
            await LoadScreens();
        }
    }
} 