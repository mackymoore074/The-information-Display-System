@page "/login"
@layout LoginLayout
@using DsplayScreen.Auth
@using DsplayScreen.IService
@using ClassLibrary.DtoModels.Screen
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IScreenService ScreenService
@inject ILogger<Login> Logger

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Screen Login</h3>
                    
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Screen Name</label>
                            <InputText @bind-Value="loginModel.ScreenName" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.ScreenName)" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">MAC Address</label>
                            <InputText @bind-Value="loginModel.MacAddress" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.MacAddress)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginScreenDto loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            Logger.LogInformation("Attempting login...");
            var response = await ScreenService.LoginAsync(loginModel);
            Console.WriteLine($"Response: {response}");
            if (response.Success)
            {
                await LocalStorage.SetItemAsStringAsync("authToken", response.Data);
                ((CustomAuthStateProvider)AuthStateProvider).NotifyAuthenticationStateChanged();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = response.Message;
                Logger.LogWarning($"Login failed: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while logging in.";
            Logger.LogError($"Login error: {ex.Message}");
        }
    }
} 