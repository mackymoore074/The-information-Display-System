@page "/"
@using DsplayScreen.Auth
@using DsplayScreen.IService
@using ClassLibrary.Models
@using ClassLibrary.DtoModels.Common
@using Microsoft.AspNetCore.Authorization
@using System.Timers
@inject IScreenService ScreenService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="@(isFullscreen ? "fullscreen-mode" : "")">
    <button class="fullscreen-button" @onclick="ToggleFullscreen">
        <span class="oi @(isFullscreen ? "oi-fullscreen-exit" : "oi-fullscreen-enter")" aria-hidden="true"></span>
    </button>

    <div class="dashboard-container">
        <!-- Menu Items Section -->
        <div class="menu-section">
            <h3>Menu Items</h3>
            @if (menuItems == null)
            {
                <div class="loading">Loading menu items...</div>
            }
            else if (!menuItems.Any())
            {
                <div class="no-data">No menu items available</div>
            }
            else
            {
                <div class="menu-items-list">
                    @foreach (var item in menuItems)
                    {
                        <div class="menu-item">
                            <h4>@item.Title</h4>
                            <div class="menu-details">
                                <p>@item.Description</p>
                                <span class="price">@item.Price.ToString()</span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- News Items Section -->
        <div class="news-section">
            <h3>News & Updates</h3>
            @if (newsItems == null)
            {
                <div class="loading">Loading news items...</div>
            }
            else if (!newsItems.Any())
            {
                <div class="no-data">No news items available</div>
            }
            else
            {
                <div class="news-items-list">
                    @foreach (var item in newsItems)
                    {
                        <div class="news-item">
                            <div class="news-header">
                                <h4>@item.Title</h4>
                            </div>
                            <div class="news-content">
                                <p>@item.NewsItemBody</p>
                            </div>
                            <div class="news-footer">
                                <span class="date">Posted: @item.DateCreated.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .fullscreen-mode {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 9999;
        background: white;
        padding: 20px;
    }

    .fullscreen-mode ::deep .sidebar {
        display: none;
    }

    .fullscreen-button {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s;
    }

    .fullscreen-button:hover {
        background-color: rgba(0, 0, 0, 0.7);
    }

    .fullscreen-button .oi {
        font-size: 24px;
    }

    /* Adjust layout when in fullscreen */
    .fullscreen-mode .dashboard-container {
        margin-left: 0;
        width: 100%;
    }

    .dashboard-container {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    .menu-section {
        width: 30%;
        padding: 20px;
        background-color: #f5f5f5;
        overflow-y: auto;
    }

    .news-section {
        width: 70%;
        padding: 20px;
        background-color: #ffffff;
        overflow-y: auto;
    }

    .menu-item, .news-item {
        background: white;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .news-item {
        background: #f8f9fa;
    }

    .price {
        color: #28a745;
        font-weight: bold;
        font-size: 1.1em;
    }

    .loading, .no-data {
        text-align: center;
        padding: 20px;
        color: #6c757d;
    }

    h3 {
        margin-bottom: 20px;
        color: #333;
    }

    h4 {
        color: #007bff;
        margin-bottom: 10px;
    }
</style>

@code {
    private List<MenuItem> menuItems;
    private List<NewsItem> newsItems;
    private Timer refreshTimer;
    private bool isFullscreen = false;

    protected override async Task OnInitializedAsync()
    {
        refreshTimer = new Timer(30000);
        refreshTimer.Elapsed += async (sender, e) => await RefreshData();
        refreshTimer.Start();

        await LoadScreenData();
        await RefreshData();
    }

    private async Task LoadScreenData()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading screen data: {ex.Message}");
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task RefreshData()
    {
        try
        {
            var menuResponse = await ScreenService.GetMenuItemsAsync();
            if (menuResponse.Success)
            {
                menuItems = menuResponse.Data
                    .OrderBy(m => m.Title)
                    .ToList();
            }

            var newsResponse = await ScreenService.GetNewsItemsAsync();
            if (newsResponse.Success)
            {
                newsItems = newsResponse.Data
                    .OrderByDescending(n => n.DateCreated)
                    .ToList();
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing data: {ex.Message}");
        }
    }

    private async Task ToggleFullscreen()
    {
        try
        {
            if (!isFullscreen)
            {
                await JSRuntime.InvokeVoidAsync("fullscreenFunctions.enterFullscreen");
                isFullscreen = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("fullscreenFunctions.exitFullscreen");
                isFullscreen = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling fullscreen: {ex.Message}");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
} 