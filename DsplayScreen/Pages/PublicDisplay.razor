@page "/public-display"
@layout LoginLayout
@using DsplayScreen.Auth
@using DsplayScreen.IService
@using ClassLibrary.Models
@using ClassLibrary.DtoModels.Common
@using System.Timers
@inject IScreenService ScreenService
@inject IJSRuntime JSRuntime
@inject IPublicDisplayService PublicDisplayService
@inject HttpClient Http
@inject IConfiguration Configuration
@implements IDisposable

<div class="@(isFullscreen ? "fullscreen-mode" : "")">
        <button class="fullscreen-button" @onclick="ToggleFullscreen">
            <span class="oi @(isFullscreen ? "oi-fullscreen-exit" : "oi-fullscreen-enter")" aria-hidden="true"></span>
        </button>

    <div class="dashboard-container">
        <!-- Menu Items Section -->
        <div class="menu-section">
            <h3>Menu Items</h3>
            @if (menuItems != null && menuItems.Any())
            {
                <div class="menu-items-list">
                    @foreach (var item in menuItems)
                    {
                        <div class="menu-item @(!item.IsActive ? "expired" : "")">
                            <h4>@item.Title</h4>
                            <p>@item.Description</p>
                            <span class="price">@item.Price.ToString()</span>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- News Items Section -->
        <div class="news-section">
            <h3>News & Updates</h3>
            @if (displayedNewsItems != null)
            {
                <div class="news-items-list">
                    @foreach (var item in displayedNewsItems)
                    {
                        <div class="news-item @(IsNewsExpired(item) ? "expired" : "")">
                            <h4>@item.Title</h4>
                            <p>@item.NewsItemBody</p>
                            <span class="date">@item.DateCreated.ToString("g")</span>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .fullscreen-mode {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 9999;
        background: white;
        padding: 20px;
    }

    .fullscreen-button {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s;
    }

    .fullscreen-button:hover {
        background-color: rgba(0, 0, 0, 0.7);
    }

    .fullscreen-button .oi {
        font-size: 24px;
    }

    .dashboard-container {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    .menu-section {
        width: 30%;
        padding: 20px;
        background-color: #f5f5f5;
        overflow-y: auto;
    }

    .news-section {
        width: 70%;
        padding: 20px;
        background-color: #ffffff;
        overflow-y: auto;
    }

    .menu-item, .news-item {
        background: white;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }

    .expired {
        opacity: 0.6;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }

    .expired h4 {
        color: #6c757d;
    }

    .expired .price,
    .expired .date,
    .expired .expiry-date {
        color: #dc3545;
    }

    .news-item {
        transition: opacity 0.3s ease-in-out;
    }

    .price {
        color: #28a745;
        font-weight: bold;
        font-size: 1.1em;
    }

    .loading, .no-data {
        text-align: center;
        padding: 20px;
        color: #6c757d;
    }
    .login-layout {
        display: block !important;
    }

    h3 {
        margin-bottom: 20px;
        color: #333;
    }

    h4 {
        color: #007bff;
        margin-bottom: 10px;
    }

    .expiry-date {
        color: #dc3545;
        font-size: 0.8em;
        display: block;
        margin-top: 5px;
        font-style: italic;
    }

    .expired::after {
        content: "EXPIRED";
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: #dc3545;
        color: white;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 0.7em;
        font-weight: bold;
    }
</style>

@code {
    private List<MenuItem> menuItems;
    private List<NewsItem> allNewsItems;
    private List<NewsItem> displayedNewsItems;
    private int? screenId;
    private System.Timers.Timer refreshTimer;
    private System.Timers.Timer displayTimer;
    private int currentNewsIndex = 0;
    private bool isFullscreen = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<ScreenDto>>("api/screen/by-ip");
            if (response?.Success == true && response.Data != null)
            {
                screenId = response.Data.Id;
                
                // Set up refresh timer for backend data
                var refreshInterval = Configuration.GetValue<int>("DisplaySettings:RefreshIntervalInSeconds") * 1000;
                refreshTimer = new System.Timers.Timer(refreshInterval);
                refreshTimer.Elapsed += async (sender, e) => await RefreshData();
                refreshTimer.AutoReset = true;
                refreshTimer.Enabled = true;

                // Set up display timer for news rotation
                var displayInterval = Configuration.GetValue<int>("DisplaySettings:NewsRotationIntervalInSeconds") * 1000;
                displayTimer = new System.Timers.Timer(displayInterval);
                displayTimer.Elapsed += async (sender, e) => 
                {
                    await InvokeAsync(() =>
                    {
                        RotateNewsItems();
                        StateHasChanged();
                    });
                };
                displayTimer.AutoReset = true;
                displayTimer.Enabled = true;

                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        if (!screenId.HasValue) return;

        try
        {
            Console.WriteLine("Refreshing data from backend...");

            var menuResponse = await Http.GetFromJsonAsync<ApiResponse<List<MenuItem>>>($"api/screen/{screenId}/menu-items");
            if (menuResponse?.Success == true)
            {
                menuItems = menuResponse.Data;
            }

            var newsResponse = await Http.GetFromJsonAsync<ApiResponse<List<NewsItem>>>($"api/screen/{screenId}/news-items");
            if (newsResponse?.Success == true)
            {
                allNewsItems = newsResponse.Data;
                Console.WriteLine($"Received {allNewsItems.Count} news items from backend");
                
                // Initialize displayed items if not already showing any
                if (displayedNewsItems == null || !displayedNewsItems.Any())
                {
                    RotateNewsItems();
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing data: {ex.Message}");
        }
    }

    private void RotateNewsItems()
    {
        if (allNewsItems == null || !allNewsItems.Any())
        {
            displayedNewsItems = new List<NewsItem>();
            return;
        }

        var itemsPerPage = Configuration.GetValue<int>("DisplaySettings:NewsItemsPerPage");
        
        // Ensure we only take exactly the configured number of items
        displayedNewsItems = allNewsItems
            .Skip(currentNewsIndex)
            .Take(itemsPerPage)
            .ToList();

        Console.WriteLine($"Displaying news items {currentNewsIndex + 1}-{currentNewsIndex + displayedNewsItems.Count} of {allNewsItems.Count}");

        // Update index for next rotation
        currentNewsIndex += itemsPerPage;

        // Reset index if we've shown all items or are about to exceed the list
        if (currentNewsIndex >= allNewsItems.Count)
        {
            currentNewsIndex = 0;
            Console.WriteLine("Resetting news rotation to beginning");
        }
    }

    private async Task ToggleFullscreen()
    {
        try
        {
            if (!isFullscreen)
            {
                await JSRuntime.InvokeVoidAsync("fullscreenFunctions.enterFullscreen");
                isFullscreen = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("fullscreenFunctions.exitFullscreen");
                isFullscreen = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling fullscreen: {ex.Message}");
            // This will generate an error log
            throw;
        }
    }

    private bool IsNewsExpired(NewsItem item)
    {
        // Consider news items older than 7 days as expired
        return (DateTime.Now - item.DateCreated).TotalDays > 7;
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        displayTimer?.Dispose();
    }
} 