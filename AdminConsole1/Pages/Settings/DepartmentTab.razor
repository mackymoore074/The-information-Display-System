@using ClassLibrary.Models
@using Microsoft.Extensions.Options
@inject HttpClient Http
@inject IOptions<ApiSettings> ApiSettings
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between align-items-center mb-4">
    <h4>Department Management</h4>
    <button class="btn btn-primary" @onclick="() => ShowModal()">
        <span class="oi oi-plus me-2"></span>Add Department
    </button>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Location</th>
                <th>Agency</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (departments?.Any() == true)
            {
                @foreach (var dept in departments)
                {
                    <tr>
                        <td>@dept.Name</td>
                        <td>@dept.Description</td>
                        <td>@(dept.Location?.Name ?? "N/A")</td>
                        <td>@(dept.Agency?.Name ?? "N/A")</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowModal(dept)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteDepartment(dept.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (showModal)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingDepartment.Id > 0 ? "Edit" : "Add") Department</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingDepartment" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="editingDepartment.Name" class="form-control" />
                            <ValidationMessage For="@(() => editingDepartment.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="editingDepartment.Description" class="form-control" />
                            <ValidationMessage For="@(() => editingDepartment.Description)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <InputSelect @bind-Value="editingDepartment.LocationId" class="form-select" @onchange="LocationChanged">
                                <option value="0">Select Location</option>
                                @foreach (var location in locations)
                                {
                                    <option value="@location.Id">@location.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Agency</label>
                            <InputSelect @bind-Value="editingDepartment.AgencyId" class="form-select">
                                <option value="0">Select Agency</option>
                                @foreach (var agency in filteredAgencies)
                                {
                                    <option value="@agency.Id">@agency.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showModal;
    private Department editingDepartment = new();
    private List<Department> departments = new();
    private List<Location> locations = new();
    private List<Agency> agencies = new();
    private List<Agency> filteredAgencies = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
        await LoadAgencies();
        await LoadDepartments();
    }

    private async Task LoadLocations()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Location>>>("/api/locations");
            if (response?.Success == true)
            {
                locations = response.Data ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading locations: {ex}");
        }
    }

    private async Task LoadAgencies()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Agency>>>("/api/agencies");
            if (response?.Success == true)
            {
                agencies = response.Data ?? new();
                filteredAgencies = agencies;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading agencies: {ex}");
        }
    }

    private async Task LoadDepartments()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Department>>>("/api/departments");
            if (response?.Success == true)
            {
                departments = response.Data ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex}");
        }
    }

    private void LocationChanged()
    {
        if (editingDepartment.LocationId > 0)
        {
            filteredAgencies = agencies.Where(a => a.LocationId == editingDepartment.LocationId).ToList();
        }
        else
        {
            filteredAgencies = agencies;
        }
    }

    private void ShowModal(Department? department = null)
    {
        editingDepartment = department != null ? new Department
        {
            Id = department.Id,
            Name = department.Name,
            Description = department.Description,
            LocationId = department.LocationId,
            AgencyId = department.AgencyId
        } : new Department();

        if (department?.LocationId != null)
        {
            filteredAgencies = agencies?.Where(a => a.LocationId == department.LocationId).ToList() ?? new List<Agency>();
        }
        
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingDepartment = new();
        filteredAgencies = agencies;
    }

    private async Task HandleSubmit()
    {
        try
        {
            HttpResponseMessage response;
            if (editingDepartment.Id == 0)
            {
                response = await Http.PostAsJsonAsync("/api/departments", editingDepartment);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"/api/departments/{editingDepartment.Id}", editingDepartment);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadDepartments();
                HideModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving department: {ex}");
        }
    }

    private async Task DeleteDepartment(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this department?" });
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"/api/departments/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadDepartments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting department: {ex}");
        }
    }
} 