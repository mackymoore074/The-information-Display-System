@using ClassLibrary.Models
@using Microsoft.Extensions.Options
@inject HttpClient Http
@inject IOptions<ApiSettings> ApiSettings
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between align-items-center mb-4">
    <h4>Agency Management</h4>
    <button class="btn btn-primary" @onclick="() => ShowModal()">
        <span class="oi oi-plus me-2"></span>Add Agency
    </button>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Location</th>
                <th>Date Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (agencies != null)
            {
                @foreach (var agency in agencies)
                {
                    <tr>
                        <td>@agency.Name</td>
                        <td>@agency.Description</td>
                        <td>@agency.Location?.Name</td>
                        <td>@agency.DateCreated.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowModal(agency)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteAgency(agency.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (showModal)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingAgency?.Id > 0 ? "Edit" : "Add") Agency</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingAgency" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="editingAgency.Name" class="form-control" />
                            <ValidationMessage For="@(() => editingAgency.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="editingAgency.Description" class="form-control" />
                            <ValidationMessage For="@(() => editingAgency.Description)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <InputSelect @bind-Value="editingAgency.LocationId" class="form-select">
                                <option value="">Select Location</option>
                                @if (locations != null)
                                {
                                    @foreach (var location in locations)
                                    {
                                        <option value="@location.Id">@location.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingAgency.LocationId)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool showModal;
    private Agency editingAgency = new();
    private List<Agency> agencies = new();
    private List<Location> locations = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
        await LoadAgencies();
    }

    private async Task LoadLocations()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Location>>>("/api/locations");
            if (response?.Success == true)
            {
                locations = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading locations: {ex}");
        }
    }

    private async Task LoadAgencies()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Agency>>>("/api/agencies");
            if (response?.Success == true)
            {
                agencies = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading agencies: {ex}");
        }
    }

    private void ShowModal(Agency? agency = null)
    {
        editingAgency = agency != null ? new Agency
        {
            Id = agency.Id,
            Name = agency.Name,
            Description = agency.Description,
            LocationId = agency.LocationId
        } : new Agency();
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingAgency = new();
    }

    private async Task HandleSubmit()
    {
        try
        {
            HttpResponseMessage response;
            if (editingAgency.Id == 0)
            {
                response = await Http.PostAsJsonAsync("/api/agencies", editingAgency);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"/api/agencies/{editingAgency.Id}", editingAgency);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadAgencies();
                HideModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving agency: {ex}");
        }
    }

    private async Task DeleteAgency(int id)
    {
        if (JSRuntime is null) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this agency?" });
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"/api/agencies/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadAgencies();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting agency: {ex}");
        }
    }
} 