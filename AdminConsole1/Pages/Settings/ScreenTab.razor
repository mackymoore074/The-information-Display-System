@using ClassLibrary.Models
@using Microsoft.Extensions.Options
@inject HttpClient Http
@inject IOptions<ApiSettings> ApiSettings
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between align-items-center mb-4">
    <h4>Screen Management</h4>
    <button class="btn btn-primary" @onclick="() => ShowModal()">
        <span class="oi oi-plus me-2"></span>Add Screen
    </button>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Department</th>
                <th>Agency</th>
                <th>Type</th>
                <th>Status</th>
                <th>Last Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (screens != null)
            {
                @foreach (var screen in screens)
                {
                    <tr>
                        <td>@screen.Name</td>
                        <td>@screen.Location?.Name</td>
                        <td>@screen.Department?.Name</td>
                        <td>@(screen.Agency?.Name ?? "N/A")</td>
                        <td>@screen.ScreenType</td>
                        <td>
                            <span class="badge @(screen.IsOnline ? "bg-success" : "bg-danger")">
                                @(screen.IsOnline ? "Online" : "Offline")
                            </span>
                        </td>
                        <td>@screen.LastUpdated.ToLocalTime().ToString("g")</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowModal(screen)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteScreen(screen.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (showModal)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingScreen?.Id > 0 ? "Edit" : "Add") Screen</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingScreen" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="editingScreen.Name" class="form-control" />
                            <ValidationMessage For="@(() => editingScreen.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <InputSelect @bind-Value="editingScreen.LocationId" class="form-select" @onchange="LocationChanged">
                                <option value="">Select Location</option>
                                @if (locations != null)
                                {
                                    @foreach (var location in locations)
                                    {
                                        <option value="@location.Id">@location.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Agency</label>
                            <InputSelect @bind-Value="editingScreen.AgencyId" class="form-select" @onchange="AgencyChanged">
                                <option value="">Select Agency</option>
                                @if (filteredAgencies != null)
                                {
                                    @foreach (var agency in filteredAgencies)
                                    {
                                        <option value="@agency.Id">@agency.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingScreen.AgencyId)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Department</label>
                            <InputSelect @bind-Value="editingScreen.DepartmentId" class="form-select">
                                <option value="">Select Department</option>
                                @if (filteredDepartments != null)
                                {
                                    @foreach (var dept in filteredDepartments)
                                    {
                                        <option value="@dept.Id">@dept.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Screen Type</label>
                            <InputSelect @bind-Value="editingScreen.ScreenType" class="form-select">
                                <option value="">Select Type</option>
                                <option value="TV">TV</option>
                                <option value="LED">LED</option>
                                <option value="Monitor">Monitor</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => editingScreen.ScreenType)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">MAC Address</label>
                            <InputText @bind-Value="editingScreen.MACAddress" class="form-control" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool showModal;
    private Screen editingScreen = new();
    private List<Screen> screens = new();
    private List<Location> locations = new();
    private List<Agency> agencies = new();
    private List<Agency> filteredAgencies = new();
    private List<Department> departments = new();
    private List<Department> filteredDepartments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
        await LoadAgencies();
        await LoadDepartments();
        await LoadScreens();
    }

    private async Task LoadScreens()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Screen>>>("/api/screens");
            if (response?.Success == true)
            {
                screens = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading screens: {ex}");
        }
    }

    private async Task LoadLocations()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Location>>>("/api/locations");
            if (response?.Success == true)
            {
                locations = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading locations: {ex}");
        }
    }

    private async Task LoadAgencies()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Agency>>>("/api/agencies");
            if (response?.Success == true)
            {
                agencies = response.Data;
                filteredAgencies = agencies;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading agencies: {ex}");
        }
    }

    private async Task LoadDepartments()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<List<Department>>>("/api/departments");
            if (response?.Success == true)
            {
                departments = response.Data;
                filteredDepartments = departments;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex}");
        }
    }

    private void LocationChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int locationId))
        {
            filteredAgencies = agencies?.Where(a => a.LocationId == locationId).ToList() ?? new List<Agency>();
            editingScreen.AgencyId = 0;
            editingScreen.DepartmentId = null;
            filteredDepartments = new List<Department>();
        }
        else
        {
            filteredAgencies = agencies;
            filteredDepartments = departments;
        }
    }

    private void AgencyChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int agencyId))
        {
            filteredDepartments = departments?
                .Where(d => d.AgencyId == agencyId && d.LocationId == editingScreen.LocationId)
                .ToList() ?? new List<Department>();
            editingScreen.DepartmentId = null;
        }
        else
        {
            filteredDepartments = departments?
                .Where(d => d.LocationId == editingScreen.LocationId)
                .ToList() ?? new List<Department>();
        }
    }

    private void ShowModal(Screen? screen = null)
    {
        editingScreen = screen != null ? new Screen
        {
            Id = screen.Id,
            Name = screen.Name,
            LocationId = screen.LocationId,
            AgencyId = screen.AgencyId,
            DepartmentId = screen.DepartmentId,
            ScreenType = screen.ScreenType,
            MACAddress = screen.MACAddress
        } : new Screen();

        if (screen?.LocationId != null)
        {
            filteredAgencies = agencies?
                .Where(a => a.LocationId == screen.LocationId)
                .ToList() ?? new List<Agency>();

            filteredDepartments = departments?
                .Where(d => d.LocationId == screen.LocationId && d.AgencyId == screen.AgencyId)
                .ToList() ?? new List<Department>();
        }
        
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingScreen = new();
        filteredAgencies = agencies;
        filteredDepartments = departments;
    }

    private async Task HandleSubmit()
    {
        try
        {
            HttpResponseMessage response;
            if (editingScreen.Id == 0)
            {
                response = await Http.PostAsJsonAsync("/api/screens", editingScreen);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"/api/screens/{editingScreen.Id}", editingScreen);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadScreens();
                HideModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving screen: {ex}");
        }
    }

    private async Task DeleteScreen(int id)
    {
        if (JSRuntime is null) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this screen?" });
        if (!confirmed) return;

        try
        {
            var response = await Http.DeleteAsync($"/api/screens/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadScreens();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting screen: {ex}");
        }
    }
} 