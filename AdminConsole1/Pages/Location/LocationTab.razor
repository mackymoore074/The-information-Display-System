@page "/location"
@using ClassLibrary.DtoModels.Location
@inject HttpClient Http
@inject ApiService ApiService
@inject IOptions<ApiSettings> ApiSettings
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-between align-items-center mb-4">
    <h4>Locations</h4>
    <button class="btn btn-primary" @onclick="() => ShowModal()">
        <span class="oi oi-plus me-2"></span>Add Location
    </button>
</div>

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Date Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (locations?.Any() == true)
            {
                @foreach (var location in locations)
                {
                    <tr>
                        <td>@location.Name</td>
                        <td>@location.Address</td>
                        <td>@location.DateCreated.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowModal(location)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteLocation(location.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center">No locations available.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (showModal)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingLocation.Id > 0 ? "Edit" : "Add") Location</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingLocation" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="editingLocation.Name" class="form-control" />
                            <ValidationMessage For="@(() => editingLocation.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Address</label>
                            <InputTextArea @bind-Value="editingLocation.Address" class="form-control" />
                            <ValidationMessage For="@(() => editingLocation.Address)" />
                        </div>

                        @if (editingLocation.Id > 0)
                        {
                            <div class="mb-3">
                                <label class="form-label">Date Created</label>
                                <InputDate @bind-Value="editingLocation.DateCreated" class="form-control" disabled />
                                <ValidationMessage For="@(() => editingLocation.DateCreated)" />
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<LocationDto> locations = new();
    private bool showModal;
    private LocationDto editingLocation = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
    }

    private async Task LoadLocations()
    {
        try
        {
            var getresult = await Http.GetAsync("https://localhost:7187/api/location/get-location");
            if(getresult.IsSuccessStatusCode){
                var resp = await getresult.Content.ReadAsStringAsync();
            }
            locations = await Http.GetFromJsonAsync<List<LocationDto>>(ApiSettings.Value.BaseUrl + "/api/location/get-location");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading locations: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to load locations. Please try again later.");
        }
    }

    private void ShowModal(LocationDto? location = null)
    {
        if (location == null)
        {
            editingLocation = new LocationDto();
        }
        else
        {
            editingLocation = new LocationDto
                {
                    Id = location.Id,
                    Name = location.Name,
                    Address = location.Address,
                    DateCreated = location.DateCreated
                };
        }
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
    }

    private async Task HandleSubmit()
    {
        try
        {
            HttpResponseMessage response;
            if (editingLocation.Id == 0)
            {
                response = await Http.PostAsJsonAsync(ApiSettings.Value.BaseUrl + "/api/location", editingLocation);
            }
            else
            {
                response = await Http.PutAsJsonAsync(ApiSettings.Value.BaseUrl + $"/api/location/{editingLocation.Id}", editingLocation);
            }

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Location saved successfully.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error saving location.");
            }

            await LoadLocations();
            HideModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving location: {ex.Message}");
        }
    }

    private async Task DeleteLocation(int id)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this location?");
            if (confirmed)
            {
                await Http.DeleteAsync(ApiSettings.Value.BaseUrl + $"/api/location/{id}");
                await LoadLocations();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error deleting location: {ex.Message}");
        }
    }
}
